import { pipe, subscribe } from "wonka";
import readyLookup from "../../ready-lookup";
static function doQuery(
  component,
  { query, variables, requestPolicy },
  options
) {
  if (component.unsubscribe) {
    component.unsubscribe();
    component.unsubscribe = null;
  }

  component.state.fetching = true;
  component.unsubscribe = pipe(
    window.$$GQL.client.query(query, variables, {
      requestPolicy,
      ...options,
    }),
    subscribe(({ data, error }) => {
      component.state.data = data;
      component.state.error = error;
      component.state.fetching = false;
    })
  ).unsubscribe;
}
class {
  onCreate({ data, error, opKey }) {
    this.state = { data, error, fetching: false };

    if (typeof document !== "undefined" && opKey) {
      window.$$GQL.ssr.restoreData({
        [opKey]: {
          data: data ? JSON.stringify(data) : undefined,
          error,
        },
      });
      readyLookup[this.id]();
    }
  }
  onInput(input) {
    if (!input.opKey) doQuery(this, input);
  }
  onDestroy() {
    this.unsubscribe && this.unsubscribe();
  }
}

<if(state.data || state.error)>
  <${input.then}(
    state,
    (options) =>
      doQuery(component, input, { requestPolicy: "network-only", ...options }),
  )/>
</if>
<else>
  <${input.placeholder}/>
</else>
