import { pipe, subscribe } from "wonka";
import { getClient, hydrateQuery } from "../../../../client";
import readyLookup from "../../ready-lookup";
class {
  onCreate({ data, error, opKey }) {
    this.state = { data, error, fetching: false };
    this.mounted = false;

    if (typeof document !== "undefined" && opKey) {
      hydrateQuery(opKey, data, error);
      readyLookup[this.id]();
    }
  }
  onInput(input) {
    if (!input.opKey) {
      this.once(this.mounted ? "mount" : "update", () => this.doQuery());
    }
  }
  onMount() {
    this.mounted = true;
  }
  onDestroy() {
    this.stopQuery();
  }
  stopQuery() {
    this.unsubscribe && this.unsubscribe();
    this.unsubscribe = undefined;
  }
  doQuery(options) {
    this.stopQuery();
    this.state.fetching = true;
    this.unsubscribe = pipe(
      getClient().query(this.input.query, this.input.variables, {
        requestPolicy: this.input.requestPolicy,
        ...options,
      }),
      subscribe(({ data, error }) => {
        this.state.data = data;
        this.state.error = error;
        this.state.fetching = false;
      })
    ).unsubscribe;
  }
}

<if(state.data || state.error)>
  <${input.then}(
    state,
    (options) => {
      component.doQuery({ requestPolicy: "network-only", ...options });
    },
  )/>
</if>
<else><${input.placeholder}/></else>
